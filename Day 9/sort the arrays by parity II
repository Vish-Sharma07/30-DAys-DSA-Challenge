Given an array of integers nums, half of the integers in nums are odd, and the other half are even.

Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.

Return any answer array that satisfies this condition.

 

Example 1:

Input: nums = [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.

// Source Code

class Solution {
public:
    vector<int> sortArrayByParityII(vector<int>& nums) {
        int n = nums.size();
        int evenIndex = 0;
        int oddIndex = 1;

        while (evenIndex < n && oddIndex < n) {
            // Find the next misplaced even number
            while (evenIndex < n && nums[evenIndex] % 2 == 0) {
                evenIndex += 2;
            }
            // Find the next misplaced odd number
            while (oddIndex < n && nums[oddIndex] % 2 == 1) {
                oddIndex += 2;
            }
            // Swap the misplaced even and odd numbers
            if (evenIndex < n && oddIndex < n) {
                swap(nums[evenIndex], nums[oddIndex]);
            }
        }
        return nums;
    }
};
