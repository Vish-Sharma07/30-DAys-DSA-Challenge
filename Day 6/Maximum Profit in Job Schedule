We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].

You're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.

If you choose a job that ends at time X you will be able to start another job that starts at time X.

 

Example 1:



Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
Output: 120

// source Code

#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        int n = startTime.size();
        vector<tuple<int, int, int>> jobs;
        for (int i = 0; i < n; ++i) {
            jobs.push_back({endTime[i], startTime[i], profit[i]});
        }
        
        // Sort jobs by end time
        sort(jobs.begin(), jobs.end());
        
        // DP array to store the maximum profit until each job
        vector<int> dp(n, 0);
        dp[0] = get<2>(jobs[0]); // The profit of the first job
        
        for (int i = 1; i < n; ++i) {
            int currProfit = get<2>(jobs[i]);
            int l = 0, r = i - 1;
            // Binary search to find the latest non-overlapping job
            while (l <= r) {
                int mid = l + (r - l) / 2;
                if (get<0>(jobs[mid]) <= get<1>(jobs[i])) {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
            
            // If we found a non-overlapping job, include its profit
            if (r != -1) {
                currProfit += dp[r];
            }
            
            // Take the maximum of including the current job or not
            dp[i] = max(dp[i - 1], currProfit);
        }
        
        return dp[n - 1];
    }
};
