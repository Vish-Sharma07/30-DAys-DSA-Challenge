An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.

You are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].

To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with color.

// Source Code
class Solution {
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        int originalColor = image[sr][sc];
        if (originalColor != color) {
            dfs(image, sr, sc, originalColor, color);
        }
        return image;
    }

private:
    void dfs(vector<vector<int>>& image, int sr, int sc, int originalColor, int newColor) {
        // Check if the current position is out of bounds or if the color is not the original color
        if (sr < 0 || sr >= image.size() || sc < 0 || sc >= image[0].size() || image[sr][sc] != originalColor) {
            return;
        }

        // Change the color of the current pixel
        image[sr][sc] = newColor;

        // Move in all four possible directions
        dfs(image, sr + 1, sc, originalColor, newColor); // Down
        dfs(image, sr - 1, sc, originalColor, newColor); // Up
        dfs(image, sr, sc + 1, originalColor, newColor); // Right
        dfs(image, sr, sc - 1, originalColor, newColor); // Left
    }
};

