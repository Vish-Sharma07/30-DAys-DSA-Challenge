Given the head of a singly linked list, reverse the list, and return the reversed list.

// Source Code

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* prev = nullptr;  // Initialize prev to nullptr
        ListNode* curr = head;     // Start with the head of the list
        ListNode* next = nullptr;  // Initialize next to nullptr
        
        while (curr != nullptr) {
            next = curr->next;  // Store the next node
            curr->next = prev;  // Reverse the current node's pointer
            prev = curr;        // Move prev to the current node
            curr = next;        // Move to the next node in the original list
        }
        
        return prev;  // prev will be the new head of the reversed list
    }
};
