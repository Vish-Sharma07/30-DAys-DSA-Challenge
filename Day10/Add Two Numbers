You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

// Source Code

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode dummy;  // Create a dummy node to simplify edge cases
        ListNode* current = &dummy;  // Use current pointer to build the result list
        int carry = 0;  // Initialize carry to 0
        
        // Traverse both lists
        while (l1 != nullptr || l2 != nullptr || carry != 0) {
            int sum = carry;  // Start with the carry from the previous iteration
            if (l1 != nullptr) {
                sum += l1->val;  // Add the value of the current node of l1
                l1 = l1->next;  // Move to the next node of l1
            }
            if (l2 != nullptr) {
                sum += l2->val;  // Add the value of the current node of l2
                l2 = l2->next;  // Move to the next node of l2
            }
            carry = sum / 10;  // Calculate the new carry
            current->next = new ListNode(sum % 10);  // Create a new node with the digit
            current = current->next;  // Move to the next node of the result list
        }
        
        return dummy.next;  // Return the next of the dummy node as the head of the result list
    }
};
