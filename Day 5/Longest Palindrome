Given a string s which consists of lowercase or uppercase letters, return the length of the longest 
palindrome
 that can be built with those letters.

Letters are case sensitive, for example, "Aa" is not considered a palindrome.

 

Example 1:

Input: s = "abccccdd"
Output: 7
Explanation: One longest palindrome that can be built is "dccaccd", whose length is 7.
Example 2:

Input: s = "a"
Output: 1
Explanation: The longest palindrome that can be built is "a", whose length is 1.

// Source Code

class Solution {
public:
    int longestPalindrome(string s) {
        unordered_map<char,int> charCount;
        // count frequency of each character
        for(char c:s){
            charCount[c]++;
        }
        int length = 0;
        int oddFound = false;
        // calculate the length of longest palindrome
        for (auto& count : charCount) {
            if (count.second % 2 == 0) {
                length += count.second;
            } else {
                length += count.second - 1;
                oddFound = true;
            }
        }
        if(oddFound){
            length +=1;
        }
        return length;
    }
};
